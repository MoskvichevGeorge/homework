# 1. Requests

# Основные возможности:


# Упрощённая работа с HTTP-запросами.

# Поддержка различных методов запроса (GET, POST и т.д.).

# Легкость в передаче параметров, заголовков, cookies.

# Удобная работа с ответами сервера (статусы, содержимое и т.д.).


# Пример использования:


import requests

# Отправляем GET-запрос на сайт
response = requests.get('https://jsonplaceholder.typicode.com/posts')
# Проверяем успешность запроса
if response.status_code == 200:
    # Выводим данные в консоль
    data = response.json()
    for post in data[:5]:  # Выводим первые 5 постов
        print(f"Title: {post['title']}\\nBody: {post['body']}\\n")
else:
    print(f"Request failed with status: {response.status_code}")

# 2. Pandas

# Основные возможности:


# Работа с данными в виде таблиц (DataFrame и Series).

# Чтение и запись данных в различных форматах (CSV, Excel, SQL и т.д.).

# Мощные инструменты для анализа и обработки данных (фильтрация, группировка, агрегация и т.д.).

# Удобные методы для отображения статистических данных.


# Пример использования:


import pandas as pd

# Чтение данных из CSV файла
df = pd.read_csv('https://people.sc.fsu.edu/~jburkardt/data/csv/hurricanes.csv')

# Выводим первые 5 строк таблицы
print(df.head())

# Анализ: подсчитываем количество ураганов по годам
year_counts = df['Year'].value_counts()
print("\\nКоличество ураганов по годам:")
print(year_counts)

# Получаем среднее значение некоторых данных
average_strength = df['Max Wind (mph)'].mean()
print(f"\\nСредняя скорость максимального ветра: {average_strength} mph")

# 3. Matplotlib

# Основные возможности:


# Создание статических, анимационных и интерактивных визуализаций на Python.

# Поддержка различных типов графиков (линейные, столбчатые, разброса, и т.д.).

# Настройка различных элементов графиков (цвета, метки, легенды и т.д.).


# Пример использования:


import matplotlib.pyplot as plt

# Данные для визуализации
years = [2015, 2016, 2017, 2018, 2019, 2020]
hurricane_counts = [7, 15, 10, 13, 15, 22]

# Создаем линейный график
plt.plot(years, hurricane_counts, marker='o')

# Настройки графика
plt.title('Количество ураганов по годам')
plt.xlabel('Год')
plt.ylabel('Количество ураганов')
plt.grid(True)

# Показываем график
plt.show()

# Заключение

# Библиотеки requests, pandas и matplotlib значительно расширяют возможности Python:


# Requests позволяет легко получать данные с веба, что важно для работы с API и парсинга данных.

# Pandas предлагает мощные инструменты для анализа и обработки данных, что делает его незаменимым при работе с большими объемами информации.

# Matplotlib позволяет визуализировать данные, что помогает лучше понять результаты анализа и делиться ими с другими.


# Эти библиотеки открывают множество возможностей для анализа данных и работы с ними, делая процесс более простым и удобным.
